/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as HomeRouteImport } from './routes/home'
import { Route as AppRouteImport } from './routes/app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as AppProjectProjectIdRouteImport } from './routes/app/project/$projectId'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api/users'
import { ServerRoute as ApiProjectsServerRouteImport } from './routes/api/projects'
import { ServerRoute as ApiFoldersServerRouteImport } from './routes/api/folders'
import { ServerRoute as ApiFilesServerRouteImport } from './routes/api/files'
import { ServerRoute as ApiAuthServerRouteImport } from './routes/api/auth'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc/$'

const rootServerRouteImport = createServerRootRoute()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppProjectProjectIdRoute = AppProjectProjectIdRouteImport.update({
  id: '/project/$projectId',
  path: '/project/$projectId',
  getParentRoute: () => AppRoute,
} as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiProjectsServerRoute = ApiProjectsServerRouteImport.update({
  id: '/api/projects',
  path: '/api/projects',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiFoldersServerRoute = ApiFoldersServerRouteImport.update({
  id: '/api/folders',
  path: '/api/folders',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiFilesServerRoute = ApiFilesServerRouteImport.update({
  id: '/api/files',
  path: '/api/files',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthServerRoute = ApiAuthServerRouteImport.update({
  id: '/api/auth',
  path: '/api/auth',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/app/': typeof AppIndexRoute
  '/app/project/$projectId': typeof AppProjectProjectIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/app': typeof AppIndexRoute
  '/app/project/$projectId': typeof AppProjectProjectIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/app/': typeof AppIndexRoute
  '/app/project/$projectId': typeof AppProjectProjectIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/home'
    | '/login'
    | '/app/'
    | '/app/project/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/home' | '/login' | '/app' | '/app/project/$projectId'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/home'
    | '/login'
    | '/app/'
    | '/app/project/$projectId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  HomeRoute: typeof HomeRoute
  LoginRoute: typeof LoginRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth': typeof ApiAuthServerRoute
  '/api/files': typeof ApiFilesServerRoute
  '/api/folders': typeof ApiFoldersServerRoute
  '/api/projects': typeof ApiProjectsServerRoute
  '/api/users': typeof ApiUsersServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth': typeof ApiAuthServerRoute
  '/api/files': typeof ApiFilesServerRoute
  '/api/folders': typeof ApiFoldersServerRoute
  '/api/projects': typeof ApiProjectsServerRoute
  '/api/users': typeof ApiUsersServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth': typeof ApiAuthServerRoute
  '/api/files': typeof ApiFilesServerRoute
  '/api/folders': typeof ApiFoldersServerRoute
  '/api/projects': typeof ApiProjectsServerRoute
  '/api/users': typeof ApiUsersServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/auth'
    | '/api/files'
    | '/api/folders'
    | '/api/projects'
    | '/api/users'
    | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/auth'
    | '/api/files'
    | '/api/folders'
    | '/api/projects'
    | '/api/users'
    | '/api/trpc/$'
  id:
    | '__root__'
    | '/api/auth'
    | '/api/files'
    | '/api/folders'
    | '/api/projects'
    | '/api/users'
    | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthServerRoute: typeof ApiAuthServerRoute
  ApiFilesServerRoute: typeof ApiFilesServerRoute
  ApiFoldersServerRoute: typeof ApiFoldersServerRoute
  ApiProjectsServerRoute: typeof ApiProjectsServerRoute
  ApiUsersServerRoute: typeof ApiUsersServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/project/$projectId': {
      id: '/app/project/$projectId'
      path: '/project/$projectId'
      fullPath: '/app/project/$projectId'
      preLoaderRoute: typeof AppProjectProjectIdRouteImport
      parentRoute: typeof AppRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/projects': {
      id: '/api/projects'
      path: '/api/projects'
      fullPath: '/api/projects'
      preLoaderRoute: typeof ApiProjectsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/folders': {
      id: '/api/folders'
      path: '/api/folders'
      fullPath: '/api/folders'
      preLoaderRoute: typeof ApiFoldersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/files': {
      id: '/api/files'
      path: '/api/files'
      fullPath: '/api/files'
      preLoaderRoute: typeof ApiFilesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth': {
      id: '/api/auth'
      path: '/api/auth'
      fullPath: '/api/auth'
      preLoaderRoute: typeof ApiAuthServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppProjectProjectIdRoute: typeof AppProjectProjectIdRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppProjectProjectIdRoute: AppProjectProjectIdRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  HomeRoute: HomeRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthServerRoute: ApiAuthServerRoute,
  ApiFilesServerRoute: ApiFilesServerRoute,
  ApiFoldersServerRoute: ApiFoldersServerRoute,
  ApiProjectsServerRoute: ApiProjectsServerRoute,
  ApiUsersServerRoute: ApiUsersServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
